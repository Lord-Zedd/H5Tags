<!--This is a mockup plugin because I like the format but dealing with offsets and stuff sounds annoying atm -->
<!-- Made by Zedd lol -->
<plugin>
	<_field_int64_integer name="vtable space*~!" />
	<_field_struct name="internal struct" />
	<_field_long_integer name="global tag ID!" />
	<_field_pad name="local tag handle!~" length="4" />
	<_field_custom name="Explanation" />
	<_field_explanation name="Death Program Selection">There are 3 levels of filtering for this.  Certain combinations of the first two levels are either impossible or redundant.  This is because they come from different places in the damage code. I will try to make that clearer here:

The first level of filtering is a special damage type (none, headshot, melee, collision).  Previously, this was the only data that was used to determine if a dead body ragdolled immediately or not.  These filters should be pretty self-explanatory.

The second level of filtering is the damage reporting info.  This includes every weapon as well as general categories like melee and explosions.  You should probably only use this to filter for specific weapons and ignore those categories because they are somewhat redundant with the first level of filtering.

The last level of filtering is a velocity gate.  If the biped being killed is traveling faster than this value, then the specified death program will be used.  When there is more than one velocity gate, the largest one will be used.

The output of the filtering system (which is part of the last level of filtering) is a death program and a scale value.  The death programs are (animate then ragdoll, headshot ragdoll program, melee ragdoll program, default ragdoll program).  The scale value only affects the ragdoll programs, not the animation.  If the scale value is 0, then the object's default acceleration scale will be used.

Headshot ragdoll program: accelerates the body upwards and torques it back in the direction the damage came from.  Scales the effect based on the dying biped's speed and direction relative to damage

Melee ragdoll program: accelerates ragdoll nodes in the direction of damage, applying more acceleration to the bodies closer to the point of impact.  Also torques the body from the point of impact.

Default ragdoll program: similar to melee program, but torque is different depending on how far from the center of mass the killing blow came from.

The headshot program is good for, well, headshots; the melee program is good for melees and collisions and possibly shotguns; and the default program is good for mostly everything else.

Inheritance:

Currently there is only one level of inheritance for each of the first two filters.  If the type of death was collision but none of the collision filters match, then it will search through &quot;none&quot; as well.  For the second level, if there is a filter for the weapon type but the velocity gate didn't match, it will search though &quot;the guardians&quot; as well.  The second filtering level looks like it has a lot of opportunity for inheritance relationships, but I didn't want to implement any without getting some input on what those should be.</_field_explanation>
	<_field_tag_reference_64 name="parent" />
	<_field_block_64 name="special type" max="7">
		<_field_long_enum name="special type^">
			<item Name="none" />
			<item Name="headshot" />
			<item Name="melee" />
			<item Name="collision" />
			<item Name="assassination" />
			<item Name="shoulderbash" />
			<item Name="groundpound" />
		</_field_long_enum>
		<_field_block_64 name="damage type" max="64">
			<_field_explanation name="Triggering Damage Source">Damage must have come from this source to trigger this death program. Leave blank to allow any damage source</_field_explanation>
			<_field_struct name="damageSource" />
			<_field_string_id name="Damage Source Name" />
			<_field_explanation name="Damaged Regions">Only trigger this death programs if one of the following body parts were the ones damaged.  If nothing is present, any body part will trigger this death program</_field_explanation>
			<_field_block_64 name="damage regions" max="11">
				<_field_char_enum name="Damaged Region#Damaged region of the body">
					<item Name="gut" />
					<item Name="chest" />
					<item Name="head" />
					<item Name="left shoulder" />
					<item Name="left arm" />
					<item Name="left leg" />
					<item Name="left foot" />
					<item Name="right shoulder" />
					<item Name="right arm" />
					<item Name="right leg" />
					<item Name="right foot" />
				</_field_char_enum>
			</_field_block_64>
			<_field_block_64 name="velocity" max="2">
				<_field_real name="minimum velocity:wu/s#this death program will be selected if the biped's velocity is above this number^" />
				<_field_long_enum name="death program">
					<item Name="animate then ragdoll" />
					<item Name="default ragdoll program" />
					<item Name="headshot ragdoll program" />
					<item Name="melee ragdoll program" />
					<item Name="powered ragdoll program" />
					<item Name="vehicle ragdoll program" />
				</_field_long_enum>
				<_field_real name="death program scale#input to the death program to scale the result (only affects ragdolls)" />
				<_field_real name="acceleration direction adjust z#adjusts the direction by adding this to z and re-normalizing" />
				<_field_real name="fallback death program scale#when we downgrade to an instantaneous ragdoll, this is the input to the death program to scale the result (only affects ragdolls)" />
				<_field_real name="fallback acceleration direction adjust z#when we downgrade to an instantaneous ragdoll, this is how we adjust the direction by adding this to z and re-normalizing" />
				<_field_real name="powered ragdoll impact radius#when killing powered ragdolls, kill all rigidbodies within this radius of the impacted rigid body" />
				<_field_string_id name="death animation stance#Override stance that contains the death animations for this gait speed when using animate then ragdoll option." />
				<_field_byte_flags name="flags">
					<item Name="conservatively ragdoll#If there is any risk of the NPC intersecting with world geometry during death animations, go straight to ragdoll" />
					<item Name="continue current animation#Do not play ping, continue whatever animation the character was playing while engaging powered ragdoll" />
					<item Name="kill rigid-bodies and descendants upon impact" />
					<item Name="force soft ping overlay" />
				</_field_byte_flags>
				<_field_pad name="pad_vgf" length="3" />
				<_field_custom name="Animate-then-ragdoll" />
				<_field_angle name="ragdoll animation bypass angle:degrees#if the angle between the terrain and the up-vector exceeds this, along the animation path, skip the animation and go straight to ragdoll (if 0, the bypass isn't used)" />
				<_field_skip name="Cosine Angle" length="4" />
				<_field_custom name="Powered-ragdoll" />
				<_field_real name="Blend duration:Length of time the animation blends into ragdoll, in seconds#At runtime we chose the lesser of this, and the duration of the animation" />
				<_field_explanation name="Blend functions">Functions defining the strength of the animation over the blend duration.  1.0 means fully driven by animation, 0.0 means pure ragdoll</_field_explanation>
				<_field_block_64 name="Blend functions" max="127">
					<_field_string_id name="name^" />
					<_field_byte_flags name="flags">
						<item Name="affects translation#The blend function controls translation (you probably want this)" />
						<item Name="affects orientation#The blend function controls orientation (you probably want this)" />
					</_field_byte_flags>
					<_field_pad name="pad_bf" length="3" />
					<_field_struct name="blend function" />
					<_field_data_64 name="data" />
					<_field_string_id name="ragdoll subgroup#Which ragdoll group (defined in the physics model) this function affects.  If empty, this is a global fallback function." />
				</_field_block_64>
			</_field_block_64>
		</_field_block_64>
	</_field_block_64>
	<_field_pad name="pad_dps_0" length="4" />
</plugin>